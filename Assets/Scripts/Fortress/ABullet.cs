using UnityEngine;

[RequireComponent(typeof(Rigidbody2D))]
public class ABullet : MonoBehaviour
{
    [Header("C√†i ƒë·∫∑t ƒë·∫°n (m·∫∑c ƒë·ªãnh)")]
    public float speed = 10f;
    public int damage = 10;
    public float lifetime = 4f;

    [Header("Offset xoay sprite (t√πy ch·ªânh trong Inspector)")]
    public float spriteAngleOffset = -90f;

    private Rigidbody2D rb;

    void Awake()
    {
        rb = GetComponent<Rigidbody2D>();
    }

    public void Launch(Vector2 direction, float shotSpeed, int shotDamage)
    {
        if (rb == null) rb = GetComponent<Rigidbody2D>();
        damage = shotDamage;
        float usedSpeed = (shotSpeed > 0f) ? shotSpeed : speed;        
        rb.linearVelocity = direction.normalized * usedSpeed; // D√πng velocity ch·ª© kh√¥ng ph·∫£i linearVelocity (ƒë·∫£m b·∫£o Unity nh·∫≠n ƒë√∫ng)
        float angle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg;// Xoay sprite theo h∆∞·ªõng b·∫Øn
        transform.rotation = Quaternion.AngleAxis(angle + spriteAngleOffset, Vector3.forward);
        CancelInvoke();
        Invoke(nameof(Deactivate), lifetime);
    }

    void OnTriggerEnter2D(Collider2D other)
    {

        if (other.gameObject.CompareTag("FortressGun")) return; // N·∫øu ƒë·∫°n ch·∫°m ch√≠nh FortressGun (ng∆∞·ªùi b·∫Øn) th√¨ b·ªè qua
        HealthController health = other.GetComponent<HealthController>(); // N·∫øu ƒë·ªëi t∆∞·ª£ng c√≥ HealthController => g√¢y s√°t th∆∞∆°ng
        if (health != null)
        {
            health.TakeDamage(damage);
            Debug.Log($"üí• {other.name} nh·∫≠n {damage} s√°t th∆∞∆°ng t·ª´ {gameObject.name}");
            Deactivate();
            return;
        }

        if (other.CompareTag("Player")) // N·∫øu va v√†o Player m√† ch∆∞a c√≥ HealthController th√¨ fallback
        {
            DualPlayerMovement player = other.GetComponent<DualPlayerMovement>();
            if (player != null)
            {
                player.SendMessage("TakeDamageFromFortress", damage, SendMessageOptions.DontRequireReceiver);
            }
            Debug.Log($"üî• Player tr√∫ng ƒë·∫°n {damage} dmg!");
            Deactivate();
        }
        if (other.GetComponent<EnemyMovement>())
        {
            Destroy(other.gameObject);
            Destroy(gameObject);
        }
    }

    void Deactivate()
    {
        CancelInvoke();
        Destroy(gameObject);
    }

    void OnBecameInvisible()
    {
        Deactivate();
    }
}
